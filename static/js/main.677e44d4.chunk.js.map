{"version":3,"sources":["components/game/assets/Back+Board.wav","components/game/assets/Swish.wav","components/game/assets/shotclockhorn.wav","components/team/Team.js","components/scoreboard/Scoreboard.js","components/game/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Team","props","shotPercentageDiv","stats","shotsTaken","shotPercentage","Math","round","score","className","name","src","logo","alt","onClick","shotHandler","ScoreBoard","visitingTeamStats","homeTeamStats","Game","shoot","team","teamStatsKey","state","shotSound","play","random","setTimeout","scoreSound","setState","resetGame","resetSound","resetCount","Audio","AudioOne","AudioTwo","AudioThree","this","venue","homeTeam","logoSrc","visitingTeam","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.677e44d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Back+Board.edb1b73e.wav\";","module.exports = __webpack_public_path__ + \"static/media/Swish.c9787971.wav\";","module.exports = __webpack_public_path__ + \"static/media/shotclockhorn.fcecaee6.wav\";","import React from 'react';\r\n\r\nfunction Team(props) {\r\n    let shotPercentageDiv\r\n\r\n    if (props.stats.shotsTaken) {\r\n        const shotPercentage = Math.round((props.stats.score / props.stats.shotsTaken) * 100)\r\n        shotPercentageDiv = (\r\n            <div>\r\n                <strong>Shooting %: {shotPercentage}</strong>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className='Team'>\r\n            <h2>{props.name}</h2>\r\n            <div className='identity'>\r\n                <img src={props.logo} alt={props.name} />\r\n            </div>\r\n            <div>\r\n                <strong>Shots:</strong> {props.stats.shotsTaken}\r\n            </div>\r\n            <div>\r\n                <strong>Score:</strong> {props.stats.score}\r\n            </div>\r\n            {shotPercentageDiv}\r\n            <button onClick={props.shotHandler}>Shoot!</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Team;","import React from 'react';\r\n\r\nfunction ScoreBoard(props) {\r\n    return (\r\n        <div className=\"ScoreBoard\">\r\n            <div className=\"teamStats\">\r\n                <h3>VISITORS</h3>\r\n                <h3>{props.visitingTeamStats.score}</h3>\r\n            </div>\r\n            <h3>SCOREBOARD</h3>\r\n            <div className=\"teamStats\">\r\n                <h3>HOME</h3>\r\n                <h3>{props.homeTeamStats.score}</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScoreBoard;","import React from 'react';\r\nimport Team from '../team/Team';\r\nimport ScoreBoard from '../scoreboard/Scoreboard';\r\nimport AudioOne from './assets/Back+Board.wav';\r\nimport AudioTwo from './assets/Swish.wav';\r\nimport AudioThree from './assets/shotclockhorn.wav';\r\n\r\n\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            resetCount: 0,\r\n            homeTeamStats: {\r\n                shotsTaken: 0,\r\n                score: 0,\r\n            },\r\n            visitingTeamStats: {\r\n                shotsTaken: 0,\r\n                score: 0,\r\n            }\r\n        }\r\n\r\n        this.shotSound = new Audio(AudioOne)\r\n        this.scoreSound = new Audio(AudioTwo)\r\n        this.resetSound = new Audio(AudioThree)\r\n    }\r\n    shoot = (team) => {\r\n        const teamStatsKey = `${team}TeamStats`\r\n        let score = this.state[teamStatsKey].score\r\n        this.shotSound.play()\r\n        if (Math.random() > 0.5) {\r\n            score += 1\r\n            setTimeout(() => {\r\n                this.scoreSound.play()\r\n            }, 650)\r\n        }\r\n        this.setState((state, props) => ({\r\n            [teamStatsKey]: {\r\n                shotsTaken: state[teamStatsKey].shotsTaken + 1,\r\n                score\r\n            }\r\n        }))\r\n    }\r\n    resetGame = () => {\r\n        this.resetSound.play()\r\n        this.setState((state, props) => ({\r\n            resetCount: state.resetCount + 1,\r\n            homeTeamStats: {\r\n                shotsTaken: 0,\r\n                score: 0,\r\n            },\r\n            visitingTeamStats: {\r\n                shotsTaken: 0,\r\n                score: 0,\r\n            }\r\n        }))\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='Game'>\r\n                <ScoreBoard\r\n                    visitingTeamStats={this.state.visitingTeamStats}\r\n                    homeTeamStats={this.state.homeTeamStats}\r\n                />\r\n                <h1>Welcome to {this.props.venue}</h1>\r\n                <div className='stats'>\r\n                    <Team\r\n                        name={this.props.homeTeam.name}\r\n                        logo={this.props.homeTeam.logoSrc}\r\n                        stats={this.state.homeTeamStats}\r\n                        shotHandler={() => this.shoot('home')}\r\n                    />\r\n                    <div className='versus'>\r\n                        <h1>VS</h1>\r\n                        <div>\r\n                            <strong>Resets:</strong> {this.state.resetCount}\r\n                            <button onClick={this.resetGame}>Reset Game</button>\r\n                        </div>\r\n                    </div>\r\n                    <Team\r\n                        name={this.props.visitingTeam.name}\r\n                        logo={this.props.visitingTeam.logoSrc}\r\n                        stats={this.state.visitingTeamStats}\r\n                        shotHandler={() => this.shoot('visiting')}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport './App.css';\nimport Game from './components/game/Game';\n\nfunction App(props) {\n  const catsOfPrey = {\n      name: 'Cats of Prey',\n      logoSrc: 'https://balladeer.files.wordpress.com/2010/09/academyofarturbanknights.jpg'\n  }\n  const birdsOfWar = {\n      name: 'Birds of War',\n      logoSrc: 'https://www.logolynx.com/images/logolynx/2d/2d3f515fd4452cbd01c18e0fb6149eb2.jpeg'\n  }\n  const flamingComets = {\n      name: 'Flaming Comets',\n      logoSrc: 'https://www.kindpng.com/picc/m/171-1716100_cool-gaming-logo-png-unused-cool-youtube-logos.png'\n  }\n  const ghastlyEntities = {\n      name: 'Ghastly Entities',\n      logoSrc: 'https://www.kindpng.com/picc/m/184-1841157_gfx-logo-mascotlogo-mascot-gaming-banner-youtube-mascot.png'\n  }\n  return (\n      <div className='App'>\n          <Game\n              venue='Madison Square Garden'\n              homeTeam={catsOfPrey}\n              visitingTeam={birdsOfWar}\n          />\n          <Game\n              venue='Qudos Bank Arena'\n              homeTeam={flamingComets}\n              visitingTeam={ghastlyEntities}\n          />\n      </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}